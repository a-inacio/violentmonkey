name: Release Violentmonkey scripts

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      - name: Run semantic-release per script
        run: |
          shopt -s nullglob
          dirs=(scripts/*/)
          if [ ${#dirs[@]} -eq 0 ]; then
            echo "No script folders found, skipping semantic-release."
          else
            for dir in "${dirs[@]}"; do
              echo "Releasing script in folder: $dir"
              cd "$dir"
              npx semantic-release --extends ../../.releaserc.json
              cd ../../
            done
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update script versions
        run: node .github/scripts/update-version.js

      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: update script versions" || echo "No changes to commit"

      - name: Upload scripts to GitHub Releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const scriptFolders = fs.readdirSync('scripts').filter(f =>
              fs.statSync(path.join('scripts', f)).isDirectory()
            );

            for (const folder of scriptFolders) {
              const assetPath = path.join('scripts', folder, 'src', 'main.user.js');
              if (!fs.existsSync(assetPath)) continue;

              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `${folder}.user.js`,
                data: fs.readFileSync(assetPath),
                headers: {
                  'content-type': 'application/javascript'
                }
              });

              console.log(`Uploaded ${folder}.user.js to release`);
            }
